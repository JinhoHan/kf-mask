{"version":3,"sources":["components/js/Accept.js","components/js/Header.js","components/js/list/Item.js","components/js/list/ItemList.js","components/js/list/SelectedItem.js","components/js/list/SelectedItemBox.js","components/js/map/ItemMapList.js","App.js","serviceWorker.js","index.js"],"names":["Accept","acceptLocationCheck","e","getAcceptLocationInformation","props","window","confirm","preventDefault","className","id","onClick","this","to","React","Component","Header","getGeoLocation","getAddressToGeoLocation","address","distance","getDistanceToUser","useState","modal","setModal","modalToggle","userDistance","setUserDistance","Navbar","daum","Postcode","oncomplete","data","roadAddress","kakao","maps","services","Geocoder","addressSearch","result","status","Status","OK","position","coords","latitude","y","longitude","x","open","src","alt","Button","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","Modal","returnFocusAfterClose","isOpen","fade","ModalHeader","ModalBody","value","onChange","event","selectedValue","target","ModalFooter","color","Item","geo","item","getDistanceFromLatLonInKm","handleClick","name","addr","remain_stat","stock_at","lat","lng","Card","CardTitle","ItemList","items","itemList","map","key","code","SelectedItem","mapContainer","document","getElementById","mapOption","center","LatLng","level","Map","markerPosition","centerImageSize","Size","centerMarkerImage","MarkerImage","marker","Marker","image","setMap","content","createElement","html","innerHTML","overlayPosition","getPosition","CustomOverlay","yAnchor","SelectedItemBox","selectedItemInTheList","handleRemove","ItemMapList","getKakaoMapMarkers","selectedItemMarker","createdItemOverlay","centerImageOption","offset","Point","positions","storesImageSize","storesMarkerImage","makeMarkerAndCustomOverlay","maskStoreLatLng","maskStoreMarker","customOverlay","zIndex","kakaoMapCallAddr","addListener","setContent","onclick","nIdx","length","App","navigator","geolocation","setState","getCurrentPosition","handleSuccess","handleError","alert","error","url","state","fetch","then","res","ok","Error","json","mask","stores","catch","err","console","log","userLat","userLng","marketLat","marketLng","dLat","getDegreesToRadians","dLon","a","Math","sin","cos","atan2","sqrt","toFixed","deg","PI","bool","acceptLocationInformation","addressObject","distanceObject","selectedItemOnTheMap","basename","process","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6f8f480a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../css/Accept.css';\r\n\r\n\r\n\r\nclass Accept extends React.Component {\r\n\r\n    acceptLocationCheck = (e) => {\r\n        const { getAcceptLocationInformation } = this.props;\r\n\r\n        if(!window.confirm(\"위치정보확인에 동의하시겠습니까?\")) {\r\n            e.preventDefault();\r\n            getAcceptLocationInformation(false);\r\n            return;\r\n        }\r\n        getAcceptLocationInformation(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"accept__box\">\r\n                <div className=\"accept__content\">\r\n                    <div className=\"accept__text\">\r\n                        내 주변 마스크는 어디에?\r\n                    </div>\r\n                    <div>\r\n                        <Link id=\"accept__button\" className=\"accept__button\" onClick={this.acceptLocationCheck} to=\"/list\">\r\n                            위치정보동의\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Accept;","/*global kakao*/\r\nimport React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport '../css/Header.css';\r\nimport '../css/HeaderModal.css';\r\n\r\nimport { Navbar, Button } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\n\r\n\r\nconst Header = ({ getGeoLocation, getAddressToGeoLocation, address, distance, getDistanceToUser }) => {\r\n\r\n    // Modal Open&Close\r\n    let [ modal, setModal ] = useState(false);\r\n    const modalToggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    // 거리 설정\r\n    let [ userDistance, setUserDistance ] = useState(distance);\r\n    const handleDistanceChange = (event) => {\r\n        let selectedValue = event.target.value;\r\n        selectedValue = selectedValue * 1;\r\n        setUserDistance(selectedValue);\r\n    }\r\n\r\n    const handleKakaoPostService = () => {\r\n        new window.daum.Postcode({\r\n            oncomplete: function(data) {\r\n                // 길 최종 주소\r\n                const roadAddress = data.roadAddress;\r\n\r\n                // 주소-좌표 변환 객체 생성\r\n                let geocoder = new kakao.maps.services.Geocoder();\r\n\r\n                // 주소로 좌표를 검색\r\n                geocoder.addressSearch(data.roadAddress, function(result, status) {\r\n                    if(status === kakao.maps.services.Status.OK) {\r\n                        let position = {\r\n                            coords: {\r\n                                latitude: result[0].y,\r\n                                longitude: result[0].x\r\n                            },\r\n                            roadAddress: roadAddress\r\n                        }\r\n                        getAddressToGeoLocation(position);\r\n                    }\r\n                });\r\n            }\r\n        }).open();\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Navbar className=\"navbar fixed-top navbar-light bg-light white\" >\r\n                <div className=\"header__title\">\r\n                    <div id=\"my__location\" className=\"header__text\" onClick={() => handleKakaoPostService()}>\r\n                        {address !== null ? address : '내 위치'}\r\n                    </div>\r\n                    <div className=\"gps__button\" onClick={() => getGeoLocation()}>\r\n                        <img className=\"gps__icon\" src=\"https://k.kakaocdn.net/dn/bkl7up/btqC48UZVoy/iu1sMcCNmjuYAlZ4zW8qHK/img.png\" alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"user__custom__button__box\">\r\n                    <Link className=\"btn btn-sm btn-primary user__toggle__button\" to=\"/list\">목록보기</Link>\r\n                    <Link className=\"btn btn-sm btn-danger user__toggle__button\" to=\"/map\">지도보기</Link>\r\n                    <Button className=\"user__custom__button btn-sm filter\" onClick={modalToggle}>\r\n                        필터&nbsp;\r\n                            <svg className=\"bi bi-filter\" width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path fillRule=\"evenodd\" d=\"M2 10.5a.5.5 0 01.5-.5h3a.5.5 0 010 1h-3a.5.5 0 01-.5-.5zm0-3a.5.5 0 01.5-.5h7a.5.5 0 010 1h-7a.5.5 0 01-.5-.5zm0-3a.5.5 0 01.5-.5h11a.5.5 0 010 1h-11a.5.5 0 01-.5-.5z\" clipRule=\"evenodd\" />\r\n                            </svg>\r\n                    </Button>\r\n                </div>\r\n            </Navbar>\r\n            <Modal className=\"user__modal\" returnFocusAfterClose={false} isOpen={modal} fade={false}>\r\n                <ModalHeader>내 주변 마스크는 어디에?</ModalHeader>\r\n                <ModalBody>\r\n                    <div>\r\n                        <div className=\"user__select__distance__title\">\r\n                            검색 반경\r\n                        </div>\r\n                        <div className=\"user__select__distance__box\">\r\n                            <select id=\"user__select__distance__selected\" className=\"btn btn-outline-secondary btn-lg user__select__distance__selected\" value={userDistance} onChange={handleDistanceChange}>\r\n                                <option className=\"\" value=\"1000\">1km</option>\r\n                                <option className=\"\" value=\"2000\">2km</option>\r\n                                <option className=\"\" value=\"5000\">5km</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => {\r\n                        // console.log(document.getElementById('user-distance-select').value);\r\n                        modalToggle();\r\n                        getDistanceToUser(userDistance);\r\n                    }}>\r\n                        완료\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport '../../css/list/Item.css';\r\n\r\nimport { Card, CardTitle } from 'reactstrap';\r\n\r\n\r\n\r\nclass Item extends React.Component {\r\n\r\n    render() {\r\n        const { geo, item, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n        \r\n        const { name, addr, remain_stat, stock_at, lat, lng } = item;\r\n\r\n\r\n        return (\r\n            <div className={`card__item__box ${remain_stat}`} >\r\n                <Card className={`card__item__innerbody ${remain_stat}`} onClick={() => handleClick(item)}>\r\n                    <div className=\"mask__store__header\">\r\n                        <CardTitle className={`mask__store__name ${remain_stat}`}>{name}</CardTitle>\r\n\r\n                        <CardTitle className=\"mask__store__distance\">{getDistanceFromLatLonInKm(geo[0], geo[1], lat, lng)} km</CardTitle>\r\n                    </div>\r\n\r\n                    <CardTitle className={`mask__store__addr ${remain_stat}`}>{addr}</CardTitle>\r\n                    {/* <CardText>{addr}</CardText> */}\r\n            \r\n                    <CardTitle className={`mask__store__remain ${remain_stat}`}>\r\n                        <div className={`mask__store__remain__color ${remain_stat}`}></div>\r\n                        <div className=\"mask__store__remain__text\">\r\n                            재고 :\r\n                                {remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                    (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                        (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')))}\r\n                        </div>\r\n                    </CardTitle>\r\n\r\n                    <CardTitle className={`mask__store__stock ${stock_at === null ? 'none_stock' : 'ok_stock'} ${remain_stat}`}>\r\n                        입고시간 : {stock_at === null ? '입고정보없음' : stock_at}\r\n                    </CardTitle>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item';\r\n\r\nimport '../../css/list/ItemList.css';\r\n\r\n\r\nclass ItemList extends React.Component {\r\n\r\n    render() {\r\n        const { geo, items, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n\r\n        const itemList = items.map(\r\n            ( item ) => (\r\n                <Item\r\n                    geo={geo}\r\n                    item={item}\r\n                    key={item.code}\r\n                    getDistanceFromLatLonInKm={getDistanceFromLatLonInKm}\r\n                    handleClick={handleClick} />\r\n            )\r\n        )\r\n\r\n        return (\r\n            <div className=\"item__list\">\r\n                {itemList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemList;","/*global kakao*/\r\nimport React from 'react';\r\n\r\nimport '../../css/list/SelectedItem.css';\r\n\r\nimport { Card, CardTitle } from 'reactstrap';\r\n\r\n\r\n\r\nclass SelectedItem extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const { lat, lng, name } = this.props;\r\n\r\n        /*\r\n         *      지도 생성\r\n         */\r\n        // ===================================================================================================\r\n        // 지도를 표시할 div container\r\n        const mapContainer = document.getElementById('map');\r\n        let mapOption = {\r\n            // 지도의 중심좌표\r\n            center: new kakao.maps.LatLng(lat, lng),\r\n            // 지도의 확대 레벨\r\n            level: 4\r\n        };\r\n\r\n        // 지도를 표시할 div 와 지도 옵션으로 지도를 생성\r\n        const map = new kakao.maps.Map(mapContainer, mapOption);\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        /*\r\n         *      중심 좌표(나의 위치) 커스텀 마커 이미지 생성 맟 마커 출력\r\n         */\r\n        // ===================================================================================================\r\n        // 마커가 표시될 위치\r\n        const markerPosition = new kakao.maps.LatLng(lat, lng);\r\n        // 마커이미지의 주소\r\n        const centerImageUrl = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png';\r\n        // 마커이미지의 크기\r\n        const centerImageSize = new kakao.maps.Size(40, 44);\r\n        // 마커이미지의 옵션. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정\r\n        const centerImageOption = null;\r\n\r\n        // 마커의 이미지 정보로 마커이미지 객체 생성\r\n        const centerMarkerImage = new kakao.maps.MarkerImage(centerImageUrl, centerImageSize, centerImageOption);\r\n        \r\n        // 마커 생성\r\n        let marker = new kakao.maps.Marker ({\r\n            position: markerPosition,\r\n            image: centerMarkerImage\r\n        });\r\n        \r\n        // 지도 위에 마커 표시\r\n        marker.setMap(map);\r\n        // ===================================================================================================\r\n        \r\n\r\n\r\n        /*\r\n         *      커스텀 오버레이에 표출될 내용(HTML 문자열이나 document element 사용) 작성 및 생성\r\n         */\r\n        // ===================================================================================================\r\n        let content = document.createElement(\"div\");\r\n        content.className = \"user__custom__overlay\";\r\n\r\n        const kakaoMapCallAddr = name + \",\" + lat + \",\" + lng;\r\n        let html = '';\r\n        html +=    '<a href=\"https://map.kakao.com/link/map/' + kakaoMapCallAddr + '\" target=\"_blank\">';\r\n        html +=         '<span class=\"title\">' + name + '</span>';\r\n        html +=     '</a>';\r\n\r\n        content.innerHTML = html;\r\n        \r\n        // 커스텀 오버레이가 표시될 위치\r\n        const overlayPosition = marker.getPosition();\r\n        \r\n        // 커스텀 오버레이 생성\r\n        new kakao.maps.CustomOverlay ({\r\n            map: map,\r\n            position: overlayPosition,\r\n            content: content,\r\n            yAnchor: 0.3\r\n        });\r\n        // ===================================================================================================\r\n    }\r\n\r\n    \r\n    render() {\r\n        const { geo, name, addr, remain_stat, stock_at, lat, lng, getDistanceFromLatLonInKm } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Card className={`innerbody__ user__selected__item`}>\r\n                    <CardTitle className={`user__selected__mask__store__name`}>{name}</CardTitle>\r\n\r\n                    <CardTitle className={`distance__ user__selected__item`}>{getDistanceFromLatLonInKm(geo[0], geo[1], lat, lng)} km</CardTitle>\r\n\r\n                    <CardTitle className={`user__selected__mask__addr`}>{addr}</CardTitle>\r\n\r\n                    <CardTitle className={`user__selected__mask__remain`}>\r\n                        <div className={`user__selected__mask__remain__color`}></div>\r\n                        <div className=\"user__selected__mask__remain__text\">\r\n                            재고 :\r\n                                {remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                    (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                        (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')))}\r\n                        </div>\r\n                    </CardTitle>\r\n\r\n                    <CardTitle className={`user__selected__mask__stock`}>\r\n                        입고시간 : {stock_at === null ? '입고정보없음' : stock_at}\r\n                    </CardTitle>\r\n                </Card>\r\n                <Card id=\"map\" className=\"kakao__map\"></Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedItem;","import React from 'react';\r\n\r\nimport '../../css/list/SelectedItemBox.css';\r\n\r\nimport SelectedItem from './SelectedItem';\r\n\r\n\r\n\r\nclass SelectedItemBox extends React.Component {\r\n\r\n    render() {\r\n        const { geo, selectedItemInTheList, getDistanceFromLatLonInKm, handleRemove } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className={`user__selected__item__detail__overlay show`} onClick={handleRemove}>\r\n                </div>\r\n                <div className={`user__selected__item__detail show`}>\r\n                    <SelectedItem\r\n                        geo={geo}\r\n                        name={selectedItemInTheList.name}\r\n                        addr={selectedItemInTheList.addr}\r\n                        remain_stat={selectedItemInTheList.remain_stat}\r\n                        stock_at={selectedItemInTheList.stock_at}\r\n                        lat={selectedItemInTheList.lat}\r\n                        lng={selectedItemInTheList.lng}\r\n                        id={selectedItemInTheList.code}\r\n                        key={selectedItemInTheList.code}\r\n                        getDistanceFromLatLonInKm={getDistanceFromLatLonInKm} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedItemBox;","/*global kakao*/\r\nimport React from 'react';\r\n\r\nimport '../../css/map/ItemMapList.css';\r\nimport '../../css/map/MapOverlay.css';\r\n\r\n\r\n\r\n\r\nclass ItemMapList extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.getKakaoMapMarkers();\r\n    }\r\n\r\n    getKakaoMapMarkers = () => {\r\n\r\n        // 클릭한 마커를 담을 변수\r\n        let selectedItemMarker = null;\r\n\r\n        // 생성된 overlay 를 담을 변수\r\n        let createdItemOverlay = null;\r\n\r\n        const { geo, items, getDistanceFromLatLonInKm } = this.props;\r\n\r\n        \r\n\r\n        /*\r\n         *      지도 생성\r\n         */\r\n        // ===================================================================================================\r\n        const lat = geo[0];\r\n        const lng = geo[1];\r\n        const mapContainer = document.getElementById(\"map__List\");\r\n\r\n        let mapOption = {\r\n            // 지도 중심좌표\r\n            center: new kakao.maps.LatLng(lat, lng),\r\n            // 지도 확대 레벨\r\n            level: 4\r\n        }\r\n        // 지도 생성\r\n        const map = new kakao.maps.Map(mapContainer, mapOption);\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        /*\r\n         *      중심 좌표(나의 위치) 커스텀 마커 이미지 생성 및 마커 출력\r\n         */\r\n        // ===================================================================================================\r\n        // 중심 좌표 마커가 표시될 위치\r\n        const markerPosition = new kakao.maps.LatLng(lat, lng);\r\n        // 마커이미지의 주소\r\n        const centerImageUrl = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png';\r\n        // 마커이미지의 크기\r\n        const centerImageSize = new kakao.maps.Size(32, 34);\r\n        // 마커이미지의 옵션. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정\r\n        const centerImageOption = {\r\n            offset: new kakao.maps.Point(27, 69)\r\n        };\r\n\r\n        // 마커의 이미지 정보로 마커이미지 객체 생성\r\n        const centerMarkerImage = new kakao.maps.MarkerImage(centerImageUrl, centerImageSize, centerImageOption);\r\n        \r\n        // 마커 생성\r\n        new kakao.maps.Marker ({\r\n            // 마커를 표시할 지도\r\n            map: map,\r\n            // 마커의 위치\r\n            position: markerPosition,\r\n            // 마커 이미지\r\n            image: centerMarkerImage\r\n        });\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        /*\r\n         *      약국 리스트\r\n         */\r\n        // ===================================================================================================\r\n        let positions = items;\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        /*\r\n         *      마커 이미지 주소 모음\r\n         */\r\n        // ===================================================================================================\r\n        // http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\r\n        // http://t1.daumcdn.net/mapjsapi/images/2x/marker.png\r\n        // https://k.kakaocdn.net/dn/1aitv/btqC3NxkUjj/kZKQNSCjnxYS0lorLaiiM0/img.png\r\n        // http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\r\n        // https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markers_sprites2.png\r\n        // https://i1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        /*\r\n         *      중심 좌표(나의 위치) 주변 약국 리스트 마커 이미지 생성\r\n         */\r\n        // ===================================================================================================\r\n        // 마커이미지 주소\r\n        const storesImageUrl = 'https://t1.daumcdn.net/mapjsapi/images/2x/marker.png';\r\n        // 마커이미지 사이즈\r\n        const storesImageSize = new kakao.maps.Size(32, 34);\r\n        // 마커이미지의 옵션. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정\r\n        const storesImageOption = null;\r\n\r\n        // 마커의 이미지 정보로 마커이미지 객체 생성\r\n        const storesMarkerImage = new kakao.maps.MarkerImage(storesImageUrl, storesImageSize, storesImageOption);\r\n        // ===================================================================================================\r\n        \r\n\r\n\r\n        /*\r\n         *      마커와 커스텀오버레이 생성\r\n         */\r\n        // ===================================================================================================\r\n        const makeMarkerAndCustomOverlay = (item) => {\r\n            \r\n            // 마커가 표시될 위치(위도&경도 설정)\r\n            const maskStoreLatLng = new kakao.maps.LatLng(item.lat, item.lng);\r\n            \r\n            // 마커 생성\r\n            const maskStoreMarker = new kakao.maps.Marker ({\r\n                map: map,\r\n                position: maskStoreLatLng,\r\n                image: storesMarkerImage\r\n            });\r\n\r\n            // 마커 위에 커스텀오버레이 설정\r\n            // 마커를 중심으로 커스텀오버레이를 표시하기 위해 CSS를 이용하여 위치 설정\r\n            let customOverlay = new kakao.maps.CustomOverlay ({\r\n                // clickable: true,\r\n                // xAnchor: 0.5,\r\n                yAnchor: 0.7,\r\n                zIndex: 3,\r\n                // content: content,\r\n                map: map,\r\n                position: maskStoreLatLng\r\n            });\r\n\r\n            // 카카오맵보기 주소\r\n            const kakaoMapCallAddr = item.name + \",\" + item.lat + \",\" + item.lng;\r\n\r\n            // 커스텀오버레이 HTML\r\n            let content = '';\r\n            content +=  '<div class=\"item__map__list__box size__300\">';\r\n            content +=      '<a class=\"kakao__map__open\" href=\"https://map.kakao.com/link/map/' + kakaoMapCallAddr + '\" target=\"_blank\">';\r\n            content +=          '';\r\n            content +=      '</a>';\r\n            content +=      '<div id=\"size__85__per\" class=\"item__map__list__item '+ item.remain_stat + ' size__85__per\">';\r\n            content +=          '<div class=\"item__map__list__innerbody ' + item.remain_stat + ' card left__only__round\">';\r\n            content +=              '<div class=\"item__map__list__store__\">';\r\n            content +=                  '<div class=\"item__map__list__store__name ' + item.remain_stat + ' card__title\">';\r\n            content +=                      item.name;\r\n            content +=                  '</div>';\r\n            content +=                  '<div class=\"item__map__list__store__distance card__title\">';\r\n            content +=                      getDistanceFromLatLonInKm(geo[0], geo[1], item.lat, item.lng) + ' km';\r\n            content +=                  '</div>';\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"item__map__list__store__addr ' + item.remain_stat + ' card__title\">';\r\n            content +=                  item.addr;\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"item__map__list__store__remain ' + item.remain_stat + ' card__title\">';\r\n            content +=                  '<div class=\"item__map__list__store__remain__color ' + item.remain_stat + '\"></div>';\r\n            content +=                  '<div class=\"item__map__list__store__remain__text\">';\r\n            content +=                      '재고 : ' + (item.remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                                            (item.remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                                                (item.remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                                                    (item.remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지'))))\r\n            content +=                  '</div>';\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"item__map__list__store__stock ' + item.remain_stat + ' card__title ' + (item.stock_at === null ? 'none_stock' : 'ok_stock') + '\">';\r\n            content +=                  '입고시간 : ' + (item.stock_at === null ? '입고정보없음' : item.stock_at);\r\n            content +=              '</div>';\r\n            content +=          '</div>';\r\n            content +=      '</div>';\r\n            content +=  '</div>';\r\n\r\n            // 마커 클릭 이벤트 설정\r\n            kakao.maps.event.addListener(maskStoreMarker, 'click', function() {\r\n                // 클릭된 마커가 없거나 기존 클릭된 마커와 다른 마커를 클릭할 경우\r\n                if(!selectedItemMarker || selectedItemMarker !== maskStoreMarker) {\r\n                    !!selectedItemMarker && createdItemOverlay.setMap(null);\r\n\r\n                    customOverlay.setContent(content);\r\n                    customOverlay.setMap(map);\r\n\r\n                    // 클릭된 마커&커스텀오버레이를 현재 클릭된 마커&커스텀오버레이 객체로 설정\r\n                    selectedItemMarker = maskStoreMarker;\r\n                    createdItemOverlay = customOverlay;\r\n                }\r\n\r\n                // 커스텀오버레이 닫기\r\n                document.getElementById('size__85__per').onclick = function() {\r\n                    createdItemOverlay.setMap(null);\r\n                    createdItemOverlay = null;\r\n                    selectedItemMarker = null;\r\n                }\r\n            });\r\n        }\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        /*\r\n         *      내 주변 약국 리스트 마커 출력\r\n         */\r\n        // ===================================================================================================\r\n        for(let nIdx = 0; nIdx < positions.length; nIdx++) {\r\n            // 마커와 커스텀오버레이 생성\r\n            makeMarkerAndCustomOverlay(positions[nIdx]);\r\n        }\r\n        // ===================================================================================================\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={`item__map__list`}>\r\n                <div id=\"map__List\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemMapList;","import React from 'react';\n\nimport Accept from './components/js/Accept';\nimport Header from './components/js/Header';\nimport ItemList from './components/js/list/ItemList';\nimport SelectedItemBox from './components/js/list/SelectedItemBox';\nimport ItemMapList from './components/js/map/ItemMapList';\n\n\n\n\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\n\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\t// 유저 GPS 위치정보(위도, 경도)\n\t\t\tgeo: [],\n\t\t\t// 유저가 입력한 주소정보\n\t\t\taddress: [],\n\t\t\t// GPS 또는 주소 정보기준 검색 거리 설정(기본 1km 설정)\n\t\t\tdistance: 1000,\n\t\t\t// GPS 또는 주소 정보, 검색 거리를 바탕으로 조회된 마스크 판매처를 담을 배열\n\t\t\titems: [],\n\t\t\t// 목록상에서 선택된 아이템(마스크 판매처)\n\t\t\tselectedItemInTheList: null,\n\t\t\t// 지도상에서 선택된 아이템(마스크 판매처)\n\t\t\tselectedItemOnTheMap: null,\n\t\t\t// 위치정보확인\n\t\t\tacceptLocationInformation: true\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.state.acceptLocationInformation) {\n\t\t\tthis.getGeoLocation();\n\t\t}\n\t}\n\n\t// 사용자 GPS 정보를 가져오는 함수\n\tgetGeoLocation = () => {\n\t\tif (!navigator.geolocation) {\n\t\t\talert(\"현재 위치 찾기를 지원하지 않는 브라우저 입니다. 혹은 설정에서 위치정보 접근 권한을 허용해주세요!\");\n\t\t} else {\n\t\t\tthis.setState({ address: null });\n\t\t\tnavigator.geolocation.getCurrentPosition(this.handleSuccess, this.handleError);\n\t\t}\n\t}\n\n\t// 사용자 GPS 정보를 가져오는데 실패할 경우 처리 함수\n\thandleError = (error) => {\n\t\talert(\"현재 위치를 받아오는데 실패하였습니다\");\n\t\treturn;\n\t}\n\n\t// 사용자 GPS 정보를 가져오는데 성공할 경우 처리 함수\n\thandleSuccess = (position) => {\n\t\t// console.log(position);\n\t\tif (position !== null) {\n\t\t\tconst geo = [position.coords.latitude, position.coords.longitude];\n\t\t\tthis.setState({ geo: geo });\n\t\t}\n\n\t\tlet url = \"https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat=\" + this.state.geo[0] + \"&lng=\" + this.state.geo[1] + \"&m=\" + this.state.distance;\n\n\t\tfetch(url)\n\t\t\t.then(res => {\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\tthrow new Error(res.status);\n\t\t\t\t}\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then(mask => this.setState({ items: mask.stores }))\n\t\t\t.catch(err => console.log(err))\n\t}\n\n\t// 사용자 GPS 정보를 토대로 한 위치와 마스크 판매처 간의 거리 구하는 함수\n\tgetDistanceFromLatLonInKm = (userLat, userLng, marketLat, marketLng) => {\n\t\t// Radius of the earth in km\n\t\tconst R = 6371;\n\t\t// degreesToRadians below\n\t\tconst dLat = this.getDegreesToRadians(marketLat - userLat);\n\t\tconst dLon = this.getDegreesToRadians(marketLng - userLng);\n\t\tconst a = Math.sin(dLat / 2) * Math.sin(dLat / 2)\n\t\t\t+ Math.cos(this.getDegreesToRadians(userLat)) * Math.cos(this.getDegreesToRadians(marketLat)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n\t\tconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t\t// Distance in km\n\t\tlet d = R * c;\n\t\td = d.toFixed(2);\n\n\t\treturn d;\n\t}\n\n\t// 라디안 값 구하는 함수\n\tgetDegreesToRadians = (deg) => {\n\t\treturn deg * (Math.PI / 180);\n\t}\n\n\t// 마스크 판매처 목록에서 하나의 판매처를 클릭할 경우 처리하는 함수\n\thandleClick = (item) => {\n\t\tthis.setState({ selectedItemInTheList: item });\n\t}\n\n\t// 선택된 판매처를 선택해제 하는 함수\n\thandleRemove = () => {\n\t\tthis.setState({ selectedItemInTheList: null });\n\t}\n\n\t// 위치정보동의 처리 함수\n\tgetAcceptLocationInformation = (bool) => {\n\t\tconsole.log(bool);\n\t\tif(bool === true) {\n\t\t\t// this.state.acceptLocationInformation 값이 변경된 이후에 함수 실행하도록 한다.\n\t\t\tthis.setState({ acceptLocationInformation: bool }, (state) => {\n\t\t\t\tthis.getGeoLocation();\n\t\t\t});\n\t\t}\n\t}\n\n\t// 사용자 입력 주소기반 GPS로 마스크 판매처 목록 정보 변경\n\tgetAddressToGeoLocation = (addressObject) => {\n\t\tif(addressObject !== null) {\n\t\t\tthis.setState({ address: addressObject.roadAddress });\n\t\t\tthis.handleSuccess(addressObject);\n\t\t}\n\t}\n\n\t// 사용자 GPS 기반으로 반경 거리에 변경에 따른 마스크 판매처 목록 정보 변경\n\tgetDistanceToUser = (distanceObject) => {\n\t\tif(this.state.distance !== distanceObject) {\n\t\t\tlet distance = distanceObject *1;\n\t\t\tthis.setState({ distance: distance }, (state) => {\n\t\t\t\t// console.log(this.state.distance);\n\t\t\t\tthis.handleSuccess(null);\n\t\t\t});\n\t\t}\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<Router basename={process.env.PUBLIC_URL} >\n\t\t\t\t<Switch>\n\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.acceptLocationInformation &&\n\t\t\t\t\t\t<Route path=\"/list\" component={() => \n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Header \n\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\tdistance={this.state.distance}\n\t\t\t\t\t\t\t\t\taddress={this.state.address}\n\t\t\t\t\t\t\t\t\tgetGeoLocation={this.getGeoLocation}\n\t\t\t\t\t\t\t\t\tgetAddressToGeoLocation={this.getAddressToGeoLocation}\n\t\t\t\t\t\t\t\t\tgetDistanceToUser={this.getDistanceToUser}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ItemList\n\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\titems={this.state.items}\n\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t\thandleClick={this.handleClick} />\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.state.selectedItemInTheList && <SelectedItemBox\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedItemInTheList={this.state.selectedItemInTheList}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleRemove={this.handleRemove} />\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t} \n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.acceptLocationInformation &&\n\t\t\t\t\t\t<Route path=\"/map\" component={() => \n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Header \n\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\tdistance={this.state.distance}\n\t\t\t\t\t\t\t\t\taddress={this.state.address}\n\t\t\t\t\t\t\t\t\tgetGeoLocation={this.getGeoLocation}\n\t\t\t\t\t\t\t\t\tgetAddressToGeoLocation={this.getAddressToGeoLocation}\n\t\t\t\t\t\t\t\t\tgetDistanceToUser={this.getDistanceToUser}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ItemMapList\n\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\titems={this.state.items}\n\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\n\n\t\t\t\t\t{\n\t\t\t\t\t\t<Route path=\"/\" component={() => \n\t\t\t\t\t\t\t<Accept \n\t\t\t\t\t\t\t\tgetAcceptLocationInformation={this.getAcceptLocationInformation}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}